options {
    STATIC = false ;
    LOOKAHEAD=1;
}

PARSER_BEGIN(Parser)

    package parser;
    import java.io.*;
    import java.util.*;
    import graphql.*;

    public class Parser {
        public HashMap<String, LabelPattern> labelsMap = new HashMap();
        public String from[] = new String[2];
        public ArrayList<String> project = new ArrayList();
        public ArrayList<LabelPattern> labels[] = new ArrayList[2];
        public ArrayList<Edge> edges = new ArrayList();
        public ArrayList<ComplexWhere> wheres = new ArrayList();
        public Join join;

        public static void main( String[] args )throws ParseException, TokenMgrError {
            Parser parser = new Parser( System.in ) ;
            parser.Start();
            System.out.println("Done Parsing");
        }
    }
PARSER_END(Parser)

SKIP : {
  "\t"
| "\r"
| "\f"
}

TOKEN :
{
   <SPACE: " ">
|	<XOR: "XOR">
|	<NOT: "NOT">

|	<IN: "IN">
|	<DISTINCT: "DISTINCT">
|	<STARTS: "STARTS">
|	<ENDS: "ENDS">
|	<WITH: "WITH">
|	<CONTAINS: "CONTAINS">
|	<IS: "IS">
|	<NULL: "NULL">
|   <LIKE: "LIKE">
|   <FROM: "FROM">



|	<EOL: "\n">

|	< PLUS: "+" >
|   < MINUS: "-" >
|   < MULTIPLY: "*" >
|   < DIVIDE: "/" >
|	< EXP: "^" >
|	< MOD: "%" >
|	< STARTLIST: "[">
|	< ENDLIST: "]">

}

TOKEN:{
	<SELECT: "SELECT">
|	<MATCH: "MATCH">
|	<WHERE:	"WHERE">
|   <JOIN: "JOIN">
|   <PROJECT: "PROJECT">
}

TOKEN:{
	<STARTSWITH: <STARTS>(" ")<WITH>>
|	<ENDSWITH: <ENDS>(" ")<WITH>>
}


TOKEN :{
    <CONDITIONALOPERATOR:  "=" | "!=">
}

TOKEN :{
    <LOGICALOPERATOR:  "AND" | "OR">
}


TOKEN :{
    <NUMERIC: <DIGIT>(<DIGIT>)*>
}


TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: (<LETTER>|"#") (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

void Start():
{
}
{
    <EOL>
    |
    (
        (
            labels[0] =  SelectClause()
            (from[0] = FromClause())?
        )
        (
            labels[1] =  SelectClause()
            (from[1] = FromClause())?
        )?
        (project = ProjectClause())?
        (edges = MatchClause())
        (wheres = WhereClause())?
        (join = JoinClause())?
    )
}

ArrayList SelectClause():
{
    ArrayList<LabelPattern> labels = new ArrayList();
    Token token, name, attribute;
    ArrayList<String> attributes;
}
{
    <SELECT>
    <EOL>
    (
        token = <IDENTIFIER>
        (
            <SPACE>
            name = <IDENTIFIER>
            {
                attributes = new ArrayList();
            }
            (
                <SPACE>
                attribute = <IDENTIFIER>
                {
                    attributes.add(attribute.toString());
                }
            )*
            {
                LabelPattern l = new LabelPattern(token.toString(), name.toString(), attributes);
                labelsMap.put(token.toString(), l);
                labels.add(l);
            }
        )
        <EOL>
    )*
    {
        return labels;
    }
}
ArrayList ProjectClause():{
    ArrayList projects = new ArrayList();
    Token t = null;
}
{
    <PROJECT>
    (
        <SPACE>
        t = <IDENTIFIER>
        {
            projects.add(t.toString());
        }
    )*
    <EOL>
    {
        return projects;
    }
}
String FromClause():{
    Token t = null;
}
{
    <FROM>
    <SPACE>
    (
        t = <IDENTIFIER>
    )
    <EOL>
    {
        return t.toString();
    }
}
ArrayList MatchClause():{
    ArrayList<Edge> edges = new ArrayList();
    String from, to;
    Token f, t;
}
{
    <MATCH>
    <EOL>
    (
        f = <IDENTIFIER>
        (
            <SPACE>
            t = <IDENTIFIER>
        )
        <EOL>
        {
        from = f.toString();
        to = t.toString();
        Edge edge = new Edge(labelsMap.get(from), labelsMap.get(to));
        edges.add(edge);
        }
    )*
    {
        return edges;
    }
}

ArrayList WhereClause():
{
    ArrayList<ComplexWhere> wheres = new ArrayList();
    ComplexWhere complexWhere = null;
    Where where = null;
    Token complex = null;
}
{
    <WHERE>
    <EOL>
    (
        {
            complexWhere = null;
        }
        where = expression()
        (
            <SPACE>
            complex = <LOGICALOPERATOR>
            <SPACE>
            {
                if(complex.toString().equalsIgnoreCase("AND"))
                    complexWhere = new WhereAnd();
                else
                    complexWhere = new WhereOr();
                complexWhere.wheres.add(where);
            }
            where = expression()
            {
                complexWhere.wheres.add(where);
            }
        )*
        <EOL>
        {
            wheres.add(complexWhere);
        }
    )*
    {
        return wheres;
    }
}
Join JoinClause():
{
    Token db1, db2, label1, property1, label2, property2, operator;
}
{
    (
        <JOIN>
        <EOL>
        db1 = <IDENTIFIER>
        "."
        label1 = <IDENTIFIER>
        "."
        property1 = <IDENTIFIER>
        operator = <CONDITIONALOPERATOR>
        db2 = <IDENTIFIER>
        "."
        label2 = <IDENTIFIER>
        "."
        property2 = <IDENTIFIER>
        <EOL>

    )
    {
        return new Join(db1.toString(), db2.toString(), label1.toString(), property1.toString(), label2.toString(), property2.toString(), operator.toString());
    }
}

Where expression():
{
    Where where = null;
    Token label = null, property = null, operator = null, value =null;
}
{
    label = <IDENTIFIER>
    "."
    property = <IDENTIFIER>
    operator = <CONDITIONALOPERATOR>
    value = <IDENTIFIER>
    {
        if(value.kind == NUMERIC)
            where = new Where(label.toString(), property.toString(), operator.toString(), Integer.parseInt(value.toString()));
        else
            where = new Where(label.toString(), property.toString(), operator.toString(), value.toString());
        return where;
    }
}