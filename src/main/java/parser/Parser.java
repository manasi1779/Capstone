/* Generated By:JavaCC: Do not edit this line. Parser.java */
    package parser;
    import java.io.*;
    import java.util.*;
    import metadata.*;

    public class Parser implements ParserConstants {
        public HashMap<String, LabelPattern> labelsMap = new HashMap();
        public String from[] = new String[2];
        public Group groupBy;
        public ArrayList<Object> project = new ArrayList();
        public ArrayList<LabelPattern> labels[] = new ArrayList[2];
        public ArrayList<Edge> edges = new ArrayList();
        public ArrayList<ComplexWhere> wheres = new ArrayList();
        public Join join;

        public static void main( String[] args )throws ParseException, TokenMgrError {
            Parser parser = new Parser( System.in ) ;
            parser.Start();
        }

  final public void Start() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case SELECT:
    case 48:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        labels[0] = SelectClause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          from[0] = FromClause();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECT:
          labels[1] = SelectClause();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FROM:
            from[1] = FromClause();
            break;
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        edges = MatchClause();
        groupBy = GroupClause();
        break;
      case 48:
        jj_consume_token(48);
        project = ProjectClause();
        break;
        jj_consume_token(48);
        wheres = WhereClause();
        break;
        jj_consume_token(48);
        join = JoinClause();
        break;
        jj_consume_token(48);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ArrayList SelectClause() throws ParseException {
    ArrayList<LabelPattern> labels = new ArrayList();
    Token token, name, attribute;
    ArrayList<String> attributes;
    jj_consume_token(SELECT);
    jj_consume_token(EOL);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      token = jj_consume_token(IDENTIFIER);
      jj_consume_token(SPACE);
      name = jj_consume_token(IDENTIFIER);
                attributes = new ArrayList();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        jj_consume_token(SPACE);
        attribute = jj_consume_token(IDENTIFIER);
                    attributes.add(attribute.toString());
      }
                LabelPattern l = new LabelPattern(token.toString(), name.toString(), attributes);
                labelsMap.put(token.toString(), l);
                labels.add(l);
      jj_consume_token(EOL);
    }
        {if (true) return labels;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList ProjectClause() throws ParseException {
    ArrayList projects = new ArrayList();
    Token t = null, aggr = null, label, property;
    AggrOperator operator;
    jj_consume_token(PROJECT);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
      case MAX:
      case MIN:
      case COUNT:
      case AVG:
      case SUM:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
        jj_consume_token(SPACE);
        t = jj_consume_token(IDENTIFIER);
                projects.add(t.toString());
        break;
      case MAX:
      case MIN:
      case COUNT:
      case AVG:
      case SUM:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAX:
          aggr = jj_consume_token(MAX);
          break;
        case MIN:
          aggr = jj_consume_token(MIN);
          break;
        case SUM:
          aggr = jj_consume_token(SUM);
          break;
        case COUNT:
          aggr = jj_consume_token(COUNT);
          break;
        case AVG:
          aggr = jj_consume_token(AVG);
          jj_consume_token(49);
          label = jj_consume_token(IDENTIFIER);
          jj_consume_token(50);
          property = jj_consume_token(IDENTIFIER);
          jj_consume_token(51);
                operator = new AggrOperator(aggr.toString(), label.toString(), property.toString());
                projects.add(operator);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(EOL);
        {if (true) return projects;}
    throw new Error("Missing return statement in function");
  }

  final public String FromClause() throws ParseException {
    Token t = null;
    jj_consume_token(FROM);
    jj_consume_token(SPACE);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(EOL);
        {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList MatchClause() throws ParseException {
    ArrayList<Edge> edges = new ArrayList();
    String from, to;
    Token f, t;
    jj_consume_token(MATCH);
    jj_consume_token(EOL);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      f = jj_consume_token(IDENTIFIER);
      jj_consume_token(SPACE);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(EOL);
        from = f.toString();
        to = t.toString();
        Edge edge = new Edge(labelsMap.get(from), labelsMap.get(to));
        edges.add(edge);
    }
        {if (true) return edges;}
    throw new Error("Missing return statement in function");
  }

//TODO allow list of groupbys
  final public Group GroupClause() throws ParseException {
    Group group;
    Token label, property;
    jj_consume_token(GROUP);
    jj_consume_token(EOL);
    label = jj_consume_token(IDENTIFIER);
    jj_consume_token(50);
    property = jj_consume_token(IDENTIFIER);
        group = new Group(label.toString(), property.toString());
        {if (true) return group;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList WhereClause() throws ParseException {
    ArrayList<ComplexWhere> wheres = new ArrayList();
    ComplexWhere complexWhere = null;
    Where where = null;
    Token complex = null;
    jj_consume_token(WHERE);
    jj_consume_token(EOL);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
            complexWhere = null;
      where = expression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        jj_consume_token(SPACE);
        complex = jj_consume_token(LOGICALOPERATOR);
        jj_consume_token(SPACE);
                if(complex.toString().equalsIgnoreCase("AND"))
                    complexWhere = new WhereAnd();
                else
                    complexWhere = new WhereOr();
                complexWhere.wheres.add(where);
        where = expression();
                complexWhere.wheres.add(where);
      }
      jj_consume_token(EOL);
            wheres.add(complexWhere);
    }
        {if (true) return wheres;}
    throw new Error("Missing return statement in function");
  }

  final public Join JoinClause() throws ParseException {
    Token db1, db2, label1, property1, label2, property2, operator;
    jj_consume_token(JOIN);
    jj_consume_token(EOL);
    db1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(50);
    label1 = jj_consume_token(IDENTIFIER);
    jj_consume_token(50);
    property1 = jj_consume_token(IDENTIFIER);
    operator = jj_consume_token(CONDITIONALOPERATOR);
    db2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(50);
    label2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(50);
    property2 = jj_consume_token(IDENTIFIER);
    jj_consume_token(EOL);
        {if (true) return new Join(db1.toString(), db2.toString(), label1.toString(), property1.toString(), label2.toString(), property2.toString(), operator.toString());}
    throw new Error("Missing return statement in function");
  }

  final public Where expression() throws ParseException {
    Where where = null;
    Token label = null, property = null, operator = null, value =null;
    label = jj_consume_token(IDENTIFIER);
    jj_consume_token(50);
    property = jj_consume_token(IDENTIFIER);
    operator = jj_consume_token(CONDITIONALOPERATOR);
    jj_consume_token(OPEN_STRING);
    value = jj_consume_token(STRING_BODY);
    jj_consume_token(CLOSE_STRING);
        if(value.kind == NUMERIC)
            where = new Where(label.toString(), property.toString(), operator.toString(), Integer.parseInt(value.toString()));
        else
            where = new Where(label.toString(), property.toString(), operator.toString(), value.toString());
        {if (true) return where;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x10000,0x4000000,0x4000000,0x4020000,0x0,0x10,0x10,0x0,0x10,0x0,0x0,0x10,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x10000,0x10000,0x400,0x0,0x7c,0x7c,0x7c,0x400,0x400,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    }
