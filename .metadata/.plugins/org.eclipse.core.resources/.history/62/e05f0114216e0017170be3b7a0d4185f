package com.project;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.neo4j.consistency.ConsistencyCheckService.Result;
//import org.neo4j.graphalgo.impl.util.PriorityMap.Entry;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Label;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.Relationship;
import org.neo4j.graphdb.ResourceIterable;
import org.neo4j.graphdb.ResourceIterator;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import org.neo4j.graphdb.factory.GraphDatabaseSettings;

public class EvaluationForEachLable {
	private static File dataFile = new File("C:/Users/pragatiunde1990/Documents/Neo4j/MultiProteinEachLabel");
	private static File queryFile = new File("C:/Users/pragatiunde1990/Documents/Neo4j/Proteins/Query/backbones_2G3D.16.sub.grf");
	private static GraphDatabaseService dbTargetData;
	private static GraphDatabaseService dbTargetQuery;
	private static Map<Long, ArrayList<Long>> searchSpace = new HashMap<Long, ArrayList<Long>>();
	private static Map<Long, Long> results = new HashMap<Long, Long>();

	public static void main(String[] args) {
		dbTargetData = new GraphDatabaseFactory()
				.newEmbeddedDatabaseBuilder(dataFile)
				.setConfig(GraphDatabaseSettings.pagecache_memory, "512M" )
				.setConfig(GraphDatabaseSettings.string_block_size, "60" )
				.setConfig(GraphDatabaseSettings.array_block_size, "300" )
				.newGraphDatabase();
		dbTargetQuery = new GraphDatabaseFactory()
				.newEmbeddedDatabaseBuilder(queryFile)
				.setConfig(GraphDatabaseSettings.pagecache_memory, "512M" )
				.setConfig(GraphDatabaseSettings.string_block_size, "60" )
				.setConfig(GraphDatabaseSettings.array_block_size, "300" )
				.newGraphDatabase();
		Long beginTime = System.currentTimeMillis();
		try (Transaction dataTransaction = dbTargetData.beginTx()) {
			try (Transaction queryTransaction = dbTargetQuery.beginTx()) {
				org.neo4j.graphdb.Result resultDB = dbTargetData
						.execute(" MATCH (n) RETURN distinct(n.dbName) as dbName");
				while (((org.neo4j.graphdb.Result) resultDB).hasNext()) {
					Map<String, Object> row = ((org.neo4j.graphdb.Result) resultDB).next();
					// System.out.println("Database Name: "+row.get("dbName"));

					ResourceIterable<Node> queryTargetNodes = dbTargetQuery.getAllNodes();
					for (Node node : queryTargetNodes) {
						Iterable<Label> labels = node.getLabels();
						for (Label lb : labels) {
							ArrayList<Long> matchLabels = findMatchLabels(lb, (String) row.get("dbName"));
							searchSpace.put(node.getId(), matchLabels);

						}
					}
					// System.out.println(searchSpace);
					Long[] queryLabels = searchSpace.keySet().toArray(new Long[searchSpace.size()]);
					// System.out.println(queryLabels);
					subgraphMaching(queryLabels, 0);

					dataTransaction.success();
					queryTransaction.success();

				}

				queryTransaction.close();
				dataTransaction.close();
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		Long endTime = System.currentTimeMillis();
		Long totalTime = endTime - beginTime;
		System.out.println("Performance of graph: " + totalTime);
		// System.out.println(result);
	}

	private static void subgraphMaching(Long[] queryLabels, int i) {
		if (queryLabels.length == results.size()) {
			System.out.println(results);

		} else {
			Long u = queryLabels[i];
			ArrayList<Long> searchSpaceOfU = searchSpace.get(u);
			for (Long v : searchSpaceOfU) {
				if (!(results.containsValue(v)) && (canMap(u, v, queryLabels))) {
					results.put(u, v);
					subgraphMaching(queryLabels, i + 1);
					results.remove(u);
				}

			}

		}

	}

	private static boolean canMap(Long u, Long v, Long[] queryLabels) {
		for (Long id : queryLabels) {
			if (u.equals(id))
				continue;
			if (isEdge(id, u, dbTargetQuery) && (results.containsKey(id))) {
				if (!isEdge(results.get(id), v, dbTargetData))
					return false;
			}
		}
		return true;
	}

	private static boolean isEdge(Long u, Long id, GraphDatabaseService graph) {
		
		Node start = graph.getNodeById(u);
		Node end = graph.getNodeById(id);
		Iterable<Relationship> relations = start.getRelationships();
		for (Relationship rel : relations) {
			if (rel.getOtherNode(start).equals(end))
				return true;
		}
		return false;
	}

	private static ArrayList<Long> findMatchLabels(Label lb, String dbName) {
		String query = "MATCH (n:`" + dbName + "`) ,(n:"+lb+") RETURN n.id";
		org.neo4j.graphdb.Result result = dbTargetData.execute(query);
		ArrayList<Long> matchLables = new ArrayList<Long>();
		while (((org.neo4j.graphdb.Result) result).hasNext()) {
			Map<String, Object> row = ((org.neo4j.graphdb.Result) result).next();
			matchLables.add(Long.parseLong(row.get("n.id").toString()));
		}
		return matchLables;
	}

}
