package capstone.graphql;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Label;
import org.neo4j.graphdb.RelationshipType;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import org.neo4j.graphdb.factory.GraphDatabaseSettings;
import org.neo4j.io.fs.FileUtils;
import org.neo4j.graphdb.Result;
import org.neo4j.unsafe.batchinsert.BatchInserter;
import org.neo4j.unsafe.batchinsert.BatchInserters;


public class CartesianProductOperator {
	private static File dataFile = new File("C:\\Users\\pragatiunde1990\\Documents\\Neo4j\\MultiProteinNodeForEachDB");
	private static GraphDatabaseService dbTargetData;

	private static void createGraph(Long fakeNodeId, String string, GraphDatabaseService dbTargetData,
			BatchInserter inserter) {
		// MATCH
		// p=(a:`backbones_140L.grf`)-[r:databaseEdge]->(n)-[c:edgeBetween]
		// ->(m) RETURN a.originalId,n.originalId, m.originalId limit 25
		String query = "MATCH p=(a:`" + string
				+ "`)-[r:databaseEdge]->(n) -[c:edgeBetween] ->(m) RETURN n.originalId as fistNode"
				+ ", m.originalId as secondNode, labels(n) as labelNamesFN,labels(m) as labelNamesLN ";
		Result result = dbTargetData.execute(query);

		while (result.hasNext()) {
			Map<String, Object> row = result.next();
			Iterable<String> fLabels =  (Iterable<String>) row.get("labelNamesFN");
			ArrayList<String> flbs = new ArrayList<String>();
			for (String st : fLabels) {
				flbs.add(st);
			}
			Iterable<String> LLabels = (Iterable<String>) row.get("labelNamesLN");
			ArrayList<String> Llbs = new ArrayList<String>();
			for (String st : LLabels) {
				Llbs.add(st);
			}
			
			Label label = Label.label(flbs.get(0));
			Map<String, Object> firstNode = new HashMap<String, Object>();
			firstNode.put("originalId", row.get("fistNode"));
			Long firstNodeid = inserter.createNode(firstNode, label);
			inserter.createRelationship(fakeNodeId, firstNodeid, RelationshipType.withName("databaseEdge"), null);
			Label labelLN = Label.label(Llbs.get(0));
			Map<String, Object> lastNode = new HashMap<String, Object>();
			firstNode.put("originalId", row.get("lastNode"));
			Long lastNodeid = inserter.createNode(lastNode, labelLN);
			inserter.createRelationship(fakeNodeId, lastNodeid, RelationshipType.withName("databaseEdge"), null);
			inserter.createRelationship(firstNodeid, lastNodeid, RelationshipType.withName("edgeBetween"), null);

		}

	}

	private static void performCartesian(String inputa, String inputb, GraphDatabaseService dbTargetData)
			throws IOException {
		String dbFileName = "C:/Users/pragatiunde1990/Documents/Neo4j/CartesianProduct";
		File dbNewFile = new File(dbFileName);
		String[] subgraph1 = inputa.split(",");
		String[] subgraph2 = inputb.split(",");
		
		FileUtils.deleteRecursively(dbNewFile);
		BatchInserter inserter = BatchInserters.inserter(dbNewFile);
		try (Transaction dataTransaction = dbTargetData.beginTx()) {
			Map<String, Object> finalNode = new HashMap<String, Object>();
			// System.out.println(dbName);
			for(int i=0; i<subgraph1.length;i++){
				for(int j=0; j< subgraph2.length;j++){
					finalNode.put("NodeName", subgraph1[i]+" X "+subgraph2[j]);
					finalNode.put("originalId", "EXTRA");
					Label dataSetLabel = Label.label(subgraph1[i]+" X "+subgraph2[j]);
					Long fakeNodeId = inserter.createNode(finalNode, dataSetLabel);
					createGraph(fakeNodeId, subgraph1[i], dbTargetData, inserter);
					createGraph(fakeNodeId,subgraph2[j],dbTargetData,inserter);
				}
			}
			
			inserter.shutdown();
			dataTransaction.success();
			System.out.println("Cartesian product of the given query is: ");
			for(int i =0; i< subgraph1.length; i++){
				for (int j=0 ; j< subgraph2.length;j++){
					System.out.println("{ "+ subgraph1[i]+ " X "+ subgraph2[j]+" }" );
				}
			}
			System.out.println("Done");
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

	}

	public static void main(String[] args) {
		try {
			dbTargetData = new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(dataFile)
					.setConfig(GraphDatabaseSettings.pagecache_memory, "512M")
					.setConfig(GraphDatabaseSettings.string_block_size, "60")
					.setConfig(GraphDatabaseSettings.array_block_size, "300").newGraphDatabase();
			Scanner sc = new Scanner(System.in);
			System.out.println("Enter the database name on which you want to perform Cartesian Product");
			System.out.println("First argument (if multiple then should be seperated by comma): ");
			String inputa = sc.next();
			System.out.println("Second argument (if multiple then should be seperated by comma):");
			String inputb = sc.next();
			performCartesian(inputa, inputb, dbTargetData);
		} catch (Exception e) {

		}

	}

}
