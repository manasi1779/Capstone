package com.project;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Label;
import org.neo4j.graphdb.Node;
import org.neo4j.graphdb.RelationshipType;
import org.neo4j.graphdb.ResourceIterable;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import org.neo4j.graphdb.factory.GraphDatabaseSettings;
import org.neo4j.io.fs.FileUtils;
import org.neo4j.unsafe.batchinsert.BatchInserter;
import org.neo4j.unsafe.batchinsert.BatchInserters;

public class LodingProteinsLabelEachNode {

	private static void processProteinGraph(File file,BatchInserter inserter, int number) {
		try{
		Map<String, Long> graphID = new HashMap<String, Long>();
		BufferedReader br = new BufferedReader(new FileReader(file));
		String dbName= file.getName();
		String line = null;
		while ((line = br.readLine()) != null) {
			String[] nodes=line.split(" ");
			Label[] labels = new Label[2];
			if(nodes.length>1){
				//char[] chArray=nodes[1].toCharArray();
				if(Character.isLetter(nodes[1].charAt(0))){
					//Label label = Label.label(nodes[1]);
					labels[0] = Label.label(nodes[1]);
					labels[1] = Label.label(dbName);
					Map<String, Object> node = new HashMap<String, Object>();
					node.put("id", nodes[0]);
					node.put("name", nodes[1]);
					node.put("dbName", dbName);
					Long id = inserter.createNode(node, labels);
					graphID.put(nodes[0], id);
				}
				else{
					Long nodeID1 = graphID.get(nodes[0]);
					Long nodeID2 = graphID.get(nodes[1]);
					inserter.createRelationship(nodeID1, nodeID2, RelationshipType.withName("edgeBetween"), null);
				}
			}
		}
		
		}catch(Exception e){
			System.out.println(e.getMessage());
		}
		
		

	}
	
	private static void loadProteins(String dbPath, String folderPath ) {
		File dbNewFile = new File(dbPath);
		try {
			FileUtils.deleteRecursively(dbNewFile);
			BatchInserter inserter = BatchInserters.inserter(dbNewFile);
			File folder = new File(folderPath);
			int dataSetNumber = 1;
			File[] listofFiles = folder.listFiles();
			for (File file : listofFiles) {
				if (dataSetNumber < 301){
					processProteinGraph(file,inserter,dataSetNumber);
					System.out.println("dataset "+ dataSetNumber+" is loaded");
				}
				dataSetNumber++;
			}
			inserter.shutdown();
			System.out.println("Done");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	private static void loadIGraph(String dbPath, String createDbPath) {
		
		
	}
	public static void main(String[] args) {
		loadProteins("C:/Users/pragatiunde1990/Documents/Neo4j/MultiProteinEachLabel","F:/SEM IV/Graph Databases/Assignment 4/Proteins/Proteins/part3_Proteins/Proteins/target");

	}

	

	
}
